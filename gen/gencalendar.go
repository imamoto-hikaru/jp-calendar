//go:generate go run .
//go:generate gofmt -w ../calendar_gen.go

package main

import (
	"bytes"
	"encoding/csv"
	"io"
	"log"
	"net/http"
	"os"
	"strconv"
	"strings"
	"text/template"

	"golang.org/x/text/encoding/japanese"
	"golang.org/x/text/transform"
)

const url = "https://www8.cao.go.jp/chosei/shukujitsu/syukujitsu.csv"

func main() {
	var holidayMap map[int]map[int]string = map[int]map[int]string{}
	var holidayNameMap map[int]map[int]string = map[int]map[int]string{}
	res, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()

	r := csv.NewReader(transform.NewReader(res.Body, japanese.ShiftJIS.NewDecoder()))
	r.FieldsPerRecord = 2
	r.TrimLeadingSpace = true
	r.ReuseRecord = true

	o, err := os.Create("../calendar_gen.go")
	if err != nil {
		log.Fatal(err)
	}
	defer o.Close()

	// skip header
	_, err = r.Read()
	if err != nil {
		log.Fatal(err)
	}

	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatal(err)
		}

		ymd := strings.Split(record[0], "/")
		y, err := strconv.Atoi(ymd[0])
		if err != nil {
			log.Fatal(err)
		}
		m, err := strconv.Atoi(ymd[1])
		if err != nil {
			log.Fatal(err)
		}
		d := ymd[2]
		if _, ok := holidayMap[y]; !ok {
			holidayMap[y] = map[int]string{}
			holidayNameMap[y] = map[int]string{}
		}

		if _, ok := holidayMap[y][m]; !ok {
			holidayMap[y][m] = d
			holidayNameMap[y][m] = record[1]
			continue
		}

		holidayMap[y][m] += "," + d
		holidayNameMap[y][m] += "," + record[1]
	}

	var v = struct {
		URL            string
		HolidayMap     map[int]map[int]string
		HolidayNameMap map[int]map[int]string
	}{
		url, holidayMap, holidayNameMap,
	}

	var buf bytes.Buffer
	err = template.Must(template.New("prog").Parse(prog)).Execute(&buf, v)
	if err != nil {
		log.Fatal(err)
	}
	o.Write(buf.Bytes())

	log.Println("done.")
}

const prog = `
// Code generated by gencalendar.go; DO NOT EDIT.
// Based on information from {{.URL}}

package jpcal

var holidays = map[int]map[int]string{
{{range $k1, $v1 := .HolidayMap}}	{{ $k1 }}: {
	{{range $k2, $v2 := $v1}} {{ $k2 }}: "{{ $v2 }}",
	{{end}}
},
{{end}}}

var holidayNames = map[int]map[int]string{
{{range $k1, $v1 := .HolidayNameMap}}	{{ $k1 }}: {
	{{range $k2, $v2 := $v1}} {{ $k2 }}: "{{ $v2 }}",
	{{end}}
},
{{end}}}
`
